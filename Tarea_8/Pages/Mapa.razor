@page "/Mapa"
@using Tarea_8.Models
@using BlazorLeaflet
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events
@using Tarea_8.Shared
@inject IJSRuntime jsr


<br>
<h4>Mapa</h4>
<div id="mapContainer" style="width: 700px; height: 300px;">
   <LeafletMap Map="_map" />
</div>

<br>
<h4 align = "center">Pacientes</h4>
<table class="table">
  <thead>
    <tr>
      <th>Cedula</th>
      <th>Nombre</th>
      <th>Vacuna 1</th>
      <th>Vacuna 2</th>
    </tr>
  </thead>
  <tbody>
    @foreach (VistaPaciente paciente in Pacientes)
    {
      <tr>
        <td>@paciente.cedula</td>
        <td>@paciente.Nombre</td>
        <td>@paciente.FechaPrimeraVacuna</td>
        <td>@paciente.FechaSegundaVacuna</td>
      </tr>
    }
  </tbody>
</table>


@code{
    private Map _map = null;
    private Pacientes paciente = null;
    public List<VistaPaciente> Pacientes { get; set; } = GetPacientes();


//Clase con las propiedades que necesito mostrar del paciente
    public class VistaPaciente
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Telefono { get; set; }
        public DateTime FechaNacimiento { get; set; }
        public string Vacuna { get; set; }
        public string Provincia { get; set; }
        public string Signo { get; set; }
        public DateTime? FechaPrimeraVacuna { get; set; }
        public DateTime? FechaSegundaVacuna { get; set; }
        public string cedula { get; set; }
        public float Latitud { get; set; }
        public float Longitud { get; set; }
    }

    //Hago un Join entre Pacientes, vacunas, y provincias para mostrar sus datos
    static List<VistaPaciente> GetPacientes()
    {
        var context = new vacunadosrdv2Context();

        return context.Pacientes
            .Join(
                context.Vacunas,
                p => p.VacunaId,
                v => v.Id,
                (p, v) => new { Vacunas = v, Pacientes = p }
            )
            .Join(
                context.Provincias,
                p => p.Pacientes.ProvinciaId,
                pr => pr.Id,
                (p, pr) => new { Provincias = pr, Vacunas = p.Vacunas, Pacientes = p.Pacientes }
            )
            .Join(
                context.Signozodiacal,
                p => p.Pacientes.SignoId,
                s => s.Id,
                (p, s) => new { 
                    Signozodiacal = s, 
                    Provincias = p.Provincias, 
                    Pacientes = p.Pacientes, 
                    Vacunas = p.Vacunas
                }
            )
            .Select(
                p => new VistaPaciente{
                    Id = p.Pacientes.Id,
                    Nombre = p.Pacientes.Nombre,
                    Apellido = p.Pacientes.Apellido,
                    Telefono = p.Pacientes.Telefono,
                    FechaNacimiento = p.Pacientes.FechaNacimiento,
                    Vacuna = p.Vacunas.Marca,
                    Provincia = p.Provincias.Nombre,
                    Signo = p.Signozodiacal.Signo,
                    FechaPrimeraVacuna = p.Pacientes.FechaPrimeraVacuna,
                    FechaSegundaVacuna = p.Pacientes.FechaSegundaVacuna,
                    cedula = p.Pacientes.cedula,
                    Latitud = p.Pacientes.Latitud,
                    Longitud = p.Pacientes.Longitud
                }
            ).ToList();
    }

 protected override void OnInitialized() 
 {
     
     _map = new Map(jsr){
            Center = new LatLng(18.9f, -70f),
            Zoom = 7.47f
        };

         _map.OnInitialized += () => {
            _map.AddLayer(new TileLayer {                
                UrlTemplate = "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });
             foreach(var p in Pacientes){
            

                var marker = new Marker(p.Latitud, p.Longitud) {
                    Title = p.Id.ToString(),
                    RiseOnHover = true,
                    Tooltip = new Tooltip() {
                        Content =  $"{p.Nombre} \r - "+
                                    $"{p.Vacuna} \n - "+
                                    $"{p.FechaPrimeraVacuna} \r - "+
                                    $"{p.FechaSegundaVacuna} \r",
                        IsPermanent = false
                    }
                };

                /*marker.OnClick += (InteractiveLayer sender, MouseEvent e) => {
                    var marker = (Marker) sender;

                    paciente = bd.Pacientes.First(x => x.Id == Convert.ToInt32(marker.Title));

                    StateHasChanged();
                };*/

                _map.AddLayer(marker);
            }
         };
    }

}